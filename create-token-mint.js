// Import necessary Solana & SPL Token libraries
import {
  Keypair,
  Connection,
  clusterApiUrl,
  PublicKey
} from "@solana/web3.js";

import {
  createMint,
  getOrCreateAssociatedTokenAccount,
  mintTo,
  TOKEN_PROGRAM_ID
} from "@solana/spl-token";

// ✅ 1. Load your wallet (payer & mint authority)
// Replace with your actual secret key (64-byte)
const payer = Keypair.fromSecretKey(Uint8Array.from([
  114, 225, 158, 138, 111, 83, 102, 240, 247, 244, 67, 98, 43, 248, 161, 32,
  160, 233, 14, 236, 9, 149, 201, 143, 42, 156, 119, 239, 32, 218, 19, 134,
  74, 244, 189, 132, 253, 143, 122, 167, 163, 209, 64, 152, 235, 7, 226, 250,
  186, 59, 8, 131, 130, 171, 137, 88, 21, 194, 52, 93, 16, 162, 79, 43
]));

// ✅ Mint authority (can also be another wallet, not just payer)
const mintAuthority = payer;

// ✅ Connect to Solana Devnet
const connection = new Connection(clusterApiUrl("devnet"), "confirmed");

/**
 * ✅ 2. Create a new SPL token mint
 * @param {Keypair} payer - Pays for transaction
 * @param {Keypair} mintAuthority - Authorized to mint tokens
 * @returns {PublicKey} - The address of the newly created mint
 */
async function createMintForToken(payer, mintAuthority) {
  const mint = await createMint(
    connection,                      // Solana RPC connection
    payer,                           // Pays fees
    mintAuthority.publicKey,         // Who can mint tokens
    null,                            // (Optional) freeze authority
    6,                               // Number of decimals (1 token = 10^6 units)
    undefined,                       // Use autogenerated keypair for mint
    undefined,                       // Confirm options
    TOKEN_PROGRAM_ID                 // SPL Token Program ID
  );

  console.log("✅ Token mint created at address:", mint.toBase58());
  return mint;
}

/**
 * ✅ 3. Create or fetch Associated Token Account (ATA), then mint tokens
 * @param {PublicKey} mint - The token mint address
 * @param {PublicKey} recipient - The wallet to receive tokens
 * @param {number} amount - Amount of tokens to mint (in smallest unit)
 */
async function mintNewToken(mint, recipient, amount) {
  // Create (or fetch) the associated token account
  const tokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    payer,             // Fee payer
    mint,              // Token mint address
    recipient          // Owner of the token account
  );

  console.log("✅ Token account:", tokenAccount.address.toBase58());

  // Mint tokens to that associated account
  await mintTo(
    connection,
    payer,                  // Fee payer
    mint,                   // Token mint address
    tokenAccount.address,   // Token account address
    payer,                  // Authority to mint
    amount                  // Amount to mint (in base units)
  );

  console.log(`✅ Minted ${amount} tokens to:`, tokenAccount.address.toBase58());
}

// ✅ Main execution function
async function main() {
  try {
    // Step 1: Create the mint
    const mint = await createMintForToken(payer, mintAuthority);

    // Step 2: Mint 100 tokens (100 * 10^6 since we use 6 decimals)
    await mintNewToken(mint, mintAuthority.publicKey, 100_000_000); // 100 tokens
  } catch (err) {
    console.error("❌ Error during token minting:", err);
  }
}

// Run the main function
main();

